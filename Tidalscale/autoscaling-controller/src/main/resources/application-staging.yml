logging:
  level:
    com:
      mpds:
        flinkautoscaler: ${LOGGING_LEVEL}
    org:
      springframework:
        data:
          r2dbc: ${R2DBC_LOGGING_LEVEL}
r2dbc:
  postgres:
    database: ${R2DBC_POSTGRES_DATABASE}
    hostname: ${R2DBC_POSTGRES_HOSTNAME}
    password: ${R2DBC_POSTGRES_PASSWORD}
    port: ${R2DBC_POSTGRES_PORT}
    username: ${R2DBC_POSTGRES_USERNAME}
  datasource:
    url: jdbc:postgresql://${R2DBC_POSTGRES_HOSTNAME}:${R2DBC_POSTGRES_PORT}/${R2DBC_POSTGRES_DATABASE}
    username: ${R2DBC_POSTGRES_USERNAME}
    password: ${R2DBC_POSTGRES_PASSWORD}
    driver-class-name: ${R2DBC_POSTGRES_DRIVER_CLASS_NAME}
  r2dbc:
    url: r2dbc:postgresql://${R2DBC_POSTGRES_HOSTNAME}:${R2DBC_POSTGRES_PORT}/${R2DBC_POSTGRES_DATABASE}
    username: ${R2DBC_POSTGRES_USERNAME}
    password: ${R2DBC_POSTGRES_PASSWORD}
  jpa:
    show-sql: ${R2DBC_JPA_SHOW_SQL}
# Kafka config
kafka:
  #  bootstrap-server: localhost:9092
  bootstrap-server: ${KAFKA_BOOTSTRAP_SERVER_HOST}:${KAFKA_BOOTSTRAP_SERVER_PORT}
  st-prediction-topic: ${KAFKA_ST_PREDICTION_TOPIC}
  lt-prediction-topic: ${KAFKA_LT_PREDICTION_TOPIC}
  topic: ${KAFKA_TOPIC}
  client-id-config: ${KAFKA_CLIENT_ID}
  acks-config: ${KAFKA_ACKS_CONFIG}
metrics-server:
  prometheus:
    base-url: ${METRICS_SERVER_PROMETHEUS_BASE_URL}
    # Use this topic for the experiment with the iot simulator
    source-topic: ${METRICS_SERVER_PROMETHEUS_SOURCE_TOPIC}
    # Use this topic for the experiment with the covid simulator
#    source-topic: covid
autoscaler:
  flink:
    base-url: ${AUTOSCALER_FLINK_BASE_URL}
    job-id: ${AUTOSCALER_FLINK_JOB_ID}
    jar-id: ${AUTOSCALER_FLINK_JAR_ID}

    program-args: ${AUTOSCALER_FLINK_PROGRAM_ARGS}
    # Use these Flink program args for the experiment with the iot simulator
    #program-args: vehicles 35.246.173.215:31090,35.246.217.71:31092,35.246.217.71:31091 iot-vehicles-events iot-vehicles-notifications 1 30000
    savepoint-directory: ${AUTOSCALER_FLINK_SAVEPOINT_DIRECTORY}
    cooldown-duration: ${AUTOSCALER_FLINK_COOLDOWN_DURATION}
spring:
  cloud:
    stream:
      function:
        definition: ${SPRING_CLOUD_STREAM_FUNCTION_DEFINITION}
        bindings:
          metrics-in-0: ${SPRING_CLOUD_STREAM_FUNCTION_BINDINGS_METRICS_IN_0}
          shortTermPredictions-in-0: ${SPRING_CLOUD_STREAM_FUNCTION_BINDINGS_ST_PREDICTIONS_IN_0}
          longTermPredictions-in-0: ${SPRING_CLOUD_STREAM_FUNCTION_BINDINGS_LT_PREDICTIONS_IN_0}
      kafka:
        binder:
          brokers: ${SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS}
      #          brokers: localhost:9092
      bindings:
        prometheus-metrics:
          destination: ${SPRING_CLOUD_STREAM_BINDINGS_PROMETHEUS_DESTINATION}
          group: ${SPRING_CLOUD_STREAM_BINDINGS_PROMETHEUS_GROUP}
          content-type: ${SPRING_CLOUD_STREAM_BINDINGS_PROMETHEUS_CONTENT_TYPE}
        short-term-predictions:
          destination: ${SPRING_CLOUD_STREAM_BINDINGS_ST_PREDICTIONS_DESTINATION}
          group: ${SPRING_CLOUD_STREAM_BINDINGS_ST_PREDICTIONS_GROUP}
          content-type: ${SPRING_CLOUD_STREAM_BINDINGS_ST_PREDICTIONS_CONTENT_TYPE}
        long-term-predictions:
          destination: ${SPRING_CLOUD_STREAM_BINDINGS_LT_PREDICTIONS_DESTINATION}
          group: ${SPRING_CLOUD_STREAM_BINDINGS_LT_PREDICTIONS_GROUP}
          content-type: ${SPRING_CLOUD_STREAM_BINDINGS_LT_PREDICTIONS_CONTENT_TYPE}
